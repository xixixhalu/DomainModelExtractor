@startuml
hide circle
class Driver<actor> {
	vehicle
	phone
	valet
	creditCardInformation
	profile
}
class ValetCompany<actor> {
	revenue
	profile
}
class Establishment<actor> {
}
class Customer<actor> {
	ticketNumber
	car
}
class ValetOperator<actor> {
	company
	login
	valetCompany
}
class ValetHead<actor> {
}
class User<actor> {
}
class Head {
	adjust()
	set()
}
class Operator {
	add()
	see()
	send()
	know()
	receive()
	have()
	retrieve()
}
class Price {
}
class Company {
	accept()
	offer()
	control()
	receive()
	service()
}
class Revenue {
}
class Car {
}
class Driver {
	select()
	want()
	check()
	pay()
	create()
	have()
	request()
	use()
}
class Pricing {
}
class TrackTransaction {
}
class Tracking {
}
class User {
	include()
	register()
}
class Establishment {
	send()
	attract()
}
class Customer {
	pay()
	request()
	enter()
	have()
}
class Payment {
}
class Location {
}
class Option {
}
class Employee {
	work()
}
class Notification {
}
class TicketNumber {
}
class Valet {
	retrieve()
}
class Vehicle {
}
class Request {
}
class Profile {
}
class Information {
}
class Queue {
}
class Login {
}
class EmailTransactionSummaryReport {
}
class Advertisement {
}
class Manner {
}
class ValetCompany {
}
class ValetHead {
}
class SnapValetUser {
}
class ValetOperator {
}
Operator --> Car : retrieve
Company --> EmailTransactionSummaryReport : receive
Establishment --> Advertisement : send
Valet o-- Head
Head --> Pricing : adjust
Customer o-- TicketNumber : enter
Company --> Location : service
Operator --> TrackTransaction : add
Operator --> Manner : retrieve
Valet o-- Operator
Valet --> Vehicle : retrieve
Operator --> Tracking : add
Operator --> Employee : add
Payment o-- Option
Operator --> Request : receive
ValetCompany <|-- Company
Customer o-- Car : request
Valet o-- Company
Establishment --> Customer : attract
Driver o-- Profile : create
ValetHead <|-- Head
Head --> Price : set
User --> Information : include
Advertisement --> SnapValetUser : to
Company --> Payment : accept
Company --> Option : offer
Driver --> Location : select
Notification --> Customer : to
Driver --> Location : check
ValetOperator <|-- Operator
Operator --> Queue : receive
Driver --> Option : have
Valet o-- Price
Employee --> Tracking : work
Company --> Revenue : control
Operator --> Notification : send
Operator --> Login : have

@enduml