@startuml
hide circle
class LanguageLearner<actor> {
}
class English<actor> {
}
class SpeakerLanguageLearner<actor> {
}
class LanguageTeacher<actor> {
}
class WebsiteOwner<actor> {
}
class User<actor> {
}
class Practitioner<actor> {
}
class Student<actor> {
}
class WebsiteProfessor<actor> {
}
class WebsiteUser<actor> {
}
class UniversityStudent<actor> {
}
class Tutor<actor> {
}
class Speaker<actor> {
}
class WebsiteUser {
	offer()
	report()
	pull()
	avoid()
	practice()
	receive()
	get()
}
class NotificationEmail {
}
class UniversityStudent {
	post()
}
class Question {
}
class English {
	achieve()
}
class Goal {
}
class HelpStudent {
	adjust()
}
class LearningPlan {
}
class WebsiteProfessor {
	offer()
}
class Meeting {
}
class SpeakerLanguageLearner {
	know()
	learn()
}
class World {
}
class WebsiteOwner {
	offer()
	post()
	assess()
	send()
	suggest()
	generate()
	monitor()
	maintain()
	view()
	inform()
	make()
}
class internet {
}
class Tutor {
	evaluate()
}
class LanguageLevel {
}
class User {
	add()
	subscribe()
	review()
	reset()
	forget()
}
class Service {
}
class People {
}
class Advertisement {
}
class LanguageLearner {
	do()
	practice()
	find()
	prioritize()
	search()
	order()
	know()
}
class LanguageAssignment {
}
class Language {
}
class Alert {
}
class MarketingPlan {
	increase()
}
class Matches {
}
class LanguageTeacher {
	give()
}
class Assignment {
}
class SearchResult {
}
class LanguageSkill {
}
class Experience {
}
class while {
}
class Student {
	register()
	modify()
	avoid()
}
class Account {
}
class Server {
}
class harassments {
}
class LanguageLearners {
}
class Password {
}
class Usage {
}
class numbers {
}
class UserStatistics {
}
class InteractionTask {
}
class USCChineseLearner {
	meet()
}
class Learner {
}
class PrivacyPolicy {
}
class Announcement {
}
class Money {
}
class UserNumber {
}
class Behavior {
}
class Practitioner {
	help()
}
class Email {
}
class Need {
}
class Eg {
	meet()
}
UniversityStudent --> Question : post
User --> Service : subscribe
MarketingPlan --> numbers : increase
WebsiteUser --> LanguageSkill : offer
Practitioner --> Student : help
WebsiteUser --> People : pull
WebsiteUser --> Language : practice
English --> Goal : achieve
SpeakerLanguageLearner --> Language : learn
WebsiteOwner --> UserStatistics : view
LanguageLearner --> LanguageLearners : search
WebsiteUser --> Experience : get
WebsiteOwner --> Email : send
WebsiteUser --> Advertisement : avoid
WebsiteOwner --> InteractionTask : suggest
HelpStudent --> LearningPlan : adjust
LanguageLearner --> while : know
WebsiteOwner --> User : inform
WebsiteOwner --> Need : assess
LanguageLearner --> LanguageAssignment : do
USCChineseLearner --> Learner : meet
WebsiteProfessor --> Meeting : offer
Student --> Account : register
LanguageLearner --> Language : practice
User --> Password : reset
Student --> PrivacyPolicy : modify
WebsiteOwner --> Server : maintain
Eg --> Learner : meet
WebsiteOwner --> Alert : post
SpeakerLanguageLearner --> World : know
WebsiteOwner --> Meeting : offer
UniversityStudent --> Announcement : post
WebsiteUser --> harassments : avoid
WebsiteOwner --> MarketingPlan : generate
WebsiteOwner --> Money : make
WebsiteOwner --> internet : monitor
LanguageLearner --> LanguageLearners : find
LanguageLearner --> Matches : prioritize
WebsiteUser --> Behavior : report
User --> User : review
User --> Password : forget
MarketingPlan --> UserNumber : increase
Tutor --> LanguageLevel : evaluate
WebsiteUser --> NotificationEmail : receive
LanguageTeacher --> Assignment : give
Student --> Usage : avoid
User --> User : add
LanguageLearner --> SearchResult : order

@enduml