@startuml
hide circle
class LanguageLearner<actor> {
	language
	match
	teacher
	languageAssignment
	assignment
	searchResult
}
class English<actor> {
	goal
}
class SpeakerLanguageLearner<actor> {
}
class LanguageTeacher<actor> {
	student
}
class WebsiteOwner<actor> {
	website
	userBase
}
class User<actor> {
	password
	chatLog
	friendList
}
class Practitioner<actor> {
}
class Student<actor> {
	info
	languageLevel
	privacyPolicy
}
class WebsiteProfessor<actor> {
}
class WebsiteUser<actor> {
	account
	languageSkill
}
class UniversityStudent<actor> {
}
class Tutor<actor> {
}
class Speaker<actor> {
}
class People {
	help
}
class Someone {
	advertisement
}
class Statistics {
}
class Proficiency {
}
class Learner {
	find()
	prioritize()
	practice()
	get()
	meet()
	finish()
	have()
	create()
	know()
	do()
	learn()
	search()
	order()
}
class Learners {
	have()
}
class Skill {
}
class Level {
	help()
}
class Website {
}
class Professor {
	offer()
}
class Blog {
}
class Owner {
	offer()
	assess()
	intercept()
	make()
	inform()
	add()
	send()
	maintain()
	suggest()
	post()
	monitor()
	generate()
	view()
}
class Activity {
}
class User {
	subscribe()
	practice()
	retrieve()
	offer()
	interact()
	pull()
	forget()
	operate()
	get()
	receive()
	avoid()
	review()
	add()
	lock()
	reset()
	report()
}
class Language {
}
class English {
	learn()
	achieve()
	talk()
}
class Email {
}
class Server {
}
class MarketingPlan {
	increase()
}
class Number {
}
class Behavior {
}
class SearchResult {
	use()
}
class Advertisement {
}
class Goal {
}
class Touch {
}
class Student {
	increase()
	avoid()
	adjust()
	modify()
	register()
}
class PrivacyPolicy {
}
class Matter {
}
class LanguageLearner {
	learn()
	know()
}
class World {
}
class Culture {
}
class Harassment {
}
class Alert {
}
class Chatting {
}
class Service {
}
class Suggestion {
}
class Assignment {
}
class Practitioner {
	help()
}
class Password {
}
class Speaker {
	know()
	use()
	help()
}
class Teacher {
	give()
	talk()
}
class Usage {
}
class Money {
}
class Country {
}
class Match {
}
class Action {
	operate()
}
class ChatLog {
}
class UniversityStudent {
	post()
}
class Announcement {
}
class Experience {
}
class Friendship {
}
class Topic {
	talk()
}
class Degree {
}
class Criterion {
}
class InteractionTask {
}
class Tutor {
	evaluate()
}
class Research {
}
class Question {
}
class System {
}
class Change {
	occur()
}
class LearningPlan {
}
class Idea {
}
class NotificationEmail {
}
class Account {
}
class Help {
}
class WebsiteProfessor {
}
class Member {
}
class LanguageTeacher {
}
class WebsiteUser {
}
class FriendList {
}
class WebsiteOwner {
}
class Other {
}
class SpeakerLanguageLearner {
}
Language o-- Skill
Website o-- User
Language o-- Teacher
User o-- Statistics
User o-- Number
LanguageLearner <|-- Learner
Language o-- Assignment
Language o-- Proficiency
Website o-- Activity
Assignment --> Student : to
Website o-- Owner
Learner --> Other : supported_by
Email --> User : to
SpeakerLanguageLearner <|-- LanguageLearner
LanguageLearner --> Learner : supported_by
Website o-- Blog
User --> User : add
User o-- Password : forget
Owner --> Research : add
MarketingPlan --> Number : increase
User o-- Password : reset
Learners --> Degree : have
Student --> Proficiency : increase
Teacher --> Assignment : give
UniversityStudent --> Question : post
Owner --> Behavior : intercept
Learner --> Assignment : do
Learner --> LanguageLearner : supported_by
Speaker --> System : use
Owner --> Statistics : view
Student --> Usage : avoid
LanguageLearner o-- Language : learn
Learner --> SearchResult : order
Owner --> Money : make
Owner --> User : inform
User --> Advertisement : avoid
WebsiteOwner <|-- Owner
Student --> LearningPlan : adjust
English o-- Goal : achieve
Owner --> Blog : post
Learner --> Country : find
Owner --> Idea : add
Learner --> Touch : get
Learner --> Match : prioritize
User --> NotificationEmail : receive
Learner --> Help : supported_by
Teacher --> Assignment : talk
Student o-- PrivacyPolicy : modify
Student --> Account : register
User o-- ChatLog : retrieve
Website o-- Professor
Learner --> Learners : find
Owner --> Matter : suggest
Owner --> MarketingPlan : generate
Learner --> Learners : meet
WebsiteProfessor <|-- Professor
UniversityStudent --> Announcement : post
LanguageLearner --> World : know
Announcement --> Member : to
User --> Experience : get
User --> Skill : offer
Learner --> Culture : know
Language o-- Learners
Learner --> Friendship : create
Learner --> Teacher : supported_by
User --> Harassment : avoid
Learner --> Degree : have
Owner --> Server : maintain
Language o-- Learner
User --> Behavior : report
User --> People : pull
Language o-- Level
Learner --> Topic : find
Speaker o-- Learner
Owner --> Alert : post
Question --> Member : to
Learner --> Degree : search
LanguageTeacher <|-- Teacher
Student --> Chatting : adjust
User --> User : review
SearchResult --> Criterion : use
WebsiteUser <|-- User
User --> Language : practice
User --> Service : subscribe
English --> Assignment : talk
English --> LanguageLearner : supported_by
Owner --> Suggestion : add
Owner --> Activity : monitor
User --> FriendList : to
English --> English : learn
Owner --> Email : send
Learner --> Assignment : finish
Owner --> InteractionTask : suggest
Tutor --> Level : evaluate
Learner --> Language : practice
Practitioner --> Student : help

@enduml