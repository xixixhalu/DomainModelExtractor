@startuml
hide circle
class LanguageLearner<actor> {
	searchResult
	teacher
	match
	assignment
	languageAssignment
	languageLearner
}
class English<actor> {
	goal
}
class SpeakerLanguageLearner<actor> {
}
class LanguageTeacher<actor> {
	student
}
class WebsiteOwner<actor> {
	websiteOwner
	userbase
}
class User<actor> {
	chatLog
	password
	friendList
}
class Practitioner<actor> {
}
class Student<actor> {
	privacyPolicy
	info
	languageLevel
}
class WebsiteUser<actor> {
	languageSkill
	account
}
class UniversityStudent<actor> {
}
class Tutor<actor> {
}
class Speaker<actor> {
}
class People {
	help
}
class Someone {
	advertisement
}
class Website {
}
class Blog {
}
class Owner {
	send()
	generate()
	assess()
	inform()
	suggest()
	intercept()
	meet()
	monitor()
	view()
	increase()
	offer()
	maintain()
	add()
	post()
	make()
	promote()
}
class Activity {
}
class Language {
}
class Learner {
	finish()
	know()
	talk()
	meet()
	prioritize()
	search()
	do()
	learn()
	find()
	order()
	practice()
	get()
	make()
	create()
}
class Level {
	help()
}
class Skill {
}
class Learners {
	have()
}
class Proficiency {
}
class LanguageLearner {
	learn()
	know()
	make()
}
class User {
	get()
	pull()
	operate()
	avoid()
	receive()
	forget()
	retrieve()
	offer()
	reset()
	report()
	add()
	practice()
	interact()
	review()
	subscribe()
}
class Student {
	modify()
	avoid()
	register()
	adjust()
}
class Account {
}
class Usage {
}
class Degree {
}
class Culture {
}
class Idea {
}
class SearchResult {
	user()
}
class Criterion {
}
class Advertisement {
}
class Service {
}
class Teacher {
	give()
}
class Password {
}
class Behavior {
}
class World {
}
class Email {
}
class ChatLog {
}
class InteractionTask {
}
class MarketingPlan {
}
class Experience {
}
class Harassment {
}
class English {
	learn()
	talk()
	achieve()
}
class Goal {
}
class Practitioner {
	increase()
	help()
}
class Friend {
}
class Assignment {
}
class Country {
}
class Touch {
}
class Friendship {
}
class Action {
	operate()
}
class Userstatistics {
}
class NotificationEmail {
}
class UniversityStudent {
	post()
}
class Announcement {
}
class Alert {
}
class Topic {
}
class Question {
}
class Chatting {
}
class Server {
}
class Suggestion {
}
class Money {
}
class Change {
	occur()
}
class PrivacyPolicy {
}
class Research {
}
class LearningPlan {
}
class Match {
}
class Tutor {
	evaluate()
}
class LanguageTeacher {
}
class WebsiteUser {
}
class WebsiteOwner {
}
class SpeakerLanguageLearner {
}
class Help {
}
class Speaker {
}
class Other {
}
Language o-- Skill
Learner --> Assignment : finish
Owner --> Blog : post
Learner --> Country : find
Owner --> Idea : add
Owner --> User : inform
Learner --> Touch : get
LanguageLearner --> Learner : learn
Student --> Owner : register
Learner --> Friendship : create
SearchResult --> Criterion : user
Learner --> Assignment : do
User --> Advertisement : avoid
Owner --> Userstatistics : view
User --> Service : subscribe
Practitioner --> Proficiency : increase
User --> Skill : offer
User --> NotificationEmail : receive
User o-- Password : reset
User o-- Password : forget
UniversityStudent --> Announcement : post
Owner --> Behavior : intercept
Owner --> User : increase
Owner --> Activity : monitor
LanguageLearner --> World : know
Owner --> Alert : post
Owner --> Email : send
User --> Behavior : report
User o-- ChatLog : retrieve
Learner --> Topic : find
UniversityStudent --> Question : post
Owner --> InteractionTask : suggest
Student --> Chatting : adjust
Owner --> MarketingPlan : generate
Learner --> Friend : make
User --> Learner : practice
Learner --> LanguageLearner : find
User --> Experience : get
Owner --> Server : maintain
User --> Harassment : avoid
User --> User : add
Student --> Account : register
Owner --> Suggestion : add
English o-- Goal : achieve
Student --> Usage : avoid
English --> Assignment : talk
Owner --> Money : make
Learners --> Degree : have
Practitioner --> Student : help
English --> English : learn
Student o-- PrivacyPolicy : modify
User --> User : review
LanguageLearner --> Friend : make
Learner --> Culture : know
Owner --> Owner : promote
User --> People : pull
Learner --> SearchResult : order
Owner --> Research : add
Student --> LearningPlan : adjust
Learner --> Match : prioritize
Learner --> Learners : find
Learner --> Learner : practice
Tutor --> Level : evaluate
Learner --> LanguageLearner : supported_by
LanguageTeacher <|-- Teacher
English --> LanguageLearner : supported_by
Language o-- Assignment
Website o-- Owner
Website o-- User
LanguageLearner --> Learner : supported_by
Website o-- Activity
WebsiteUser <|-- User
LanguageLearner <|-- Learner
WebsiteOwner <|-- Owner
SpeakerLanguageLearner <|-- LanguageLearner
Language o-- Teacher
Language o-- Learner
Language o-- Level
Language o-- Proficiency
Language o-- Learners
Learner --> Teacher : supported_by
Learner --> Help : supported_by
Speaker o-- Learner
Website o-- Blog
Learner --> Other : supported_by

@enduml