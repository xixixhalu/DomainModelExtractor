@startuml
hide circle
class Manager<actor> {
	client
	interest
}
class Contractor<actor> {
	comment
	work
	resource
	information
}
class Architect<actor> {
	colleague
}
class ProjectManager<actor> {
}
class Category {
}
class Meeting {
}
class Log {
}
class Contractor {
	edit()
	see()
	send()
	enter()
	ask()
	report()
	log_in()
	save()
	manage()
}
class Resource {
}
class People {
	get()
}
class Information {
	access()
}
class Manager {
	modify()
	send()
	add()
	log_in()
	create()
	approve()
	find()
	track()
	search()
	edit()
	see()
	plan()
	reject()
	make()
	save()
	talk()
	take()
	send_out()
	disapprove()
	access()
}
class Task {
}
class Progress {
}
class Minute {
}
class QuestionIssue {
}
class Project {
}
class Comment {
}
class Status {
	report()
}
class Everyone {
	know()
}
class Request {
}
class Summary {
}
class Issue {
}
class Change {
}
class Message {
}
class Event {
	take()
}
class Place {
}
class Decision {
}
class Report {
}
class Work {
	know()
}
class Note {
}
class Topic {
}
class Data {
}
class Attendee {
}
class Company {
}
class Date {
}
class Customer {
}
class ProjectManager {
}
class Architect {
}
class Colleague {
}
Manager --> Information : edit
Message --> Manager : to
Manager --> Log : access
Manager --> Decision : make
Meeting o-- Minute
Manager --> Task : approve
Contractor --> Progress : save
Task o-- Category
Contractor --> Report : enter
Manager --> Status : save
Minute --> Attendee : to
Project o-- Manager
Manager --> Progress : save
Contractor --> Issue : ask
Architect --> Colleague : supported_by
Contractor --> Status : save
Contractor --> Minute : see
Manager --> Note : take
Manager --> Minute : send_out
Meeting o-- Log
Contractor --> QuestionIssue : ask
Manager --> Topic : find
Task o-- Progress
Manager --> Category : edit
Manager --> Project : create
Contractor --> Data : enter
Contractor --> Change : report
Contractor --> Minute : ask
Work o-- Status
Contractor --> Task : see
Contractor --> Message : send
Change --> Company : to
Manager --> Request : disapprove
ProjectManager <|-- Manager
Date <|-- Customer
Manager --> Comment : reject
Event --> Place : take
Contractor o-- Resource : manage
Manager --> Comment : approve
Manager --> Project : modify
Manager --> Progress : track
Manager --> Summary : see
Request <|-- Comment
Manager --> Minute : send
Meeting o-- Information
People --> Information : get
Contractor o-- Information : edit
Manager --> Request : approve

@enduml