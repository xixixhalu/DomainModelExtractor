@startuml
hide circle
class Manager<actor> {
	client
	interest
}
class Contractor<actor> {
	resource
	information
	work
	comment
}
class Architect<actor> {
	colleague
}
class ProjectManager<actor> {
}
class Category {
}
class Meeting {
}
class Log {
}
class Minute {
}
class Contractor {
	send()
	ask()
	edit()
	save()
	manager()
	log_in()
	report()
	enter()
	see()
}
class Report {
}
class Manager {
	access()
	track()
	add()
	modify()
	find()
	reject()
	edit()
	save()
	approve()
	create()
	search()
	talk()
	log_in()
	send_out()
	disapprove()
	make()
	see()
	take()
}
class Summary {
}
class ProjectManager {
	plan()
	track()
}
class Progress {
}
class Resource {
}
class Task {
}
class Question {
}
class Topic {
}
class Status {
}
class Event {
	take()
}
class Place {
}
class Note {
}
class Decision {
}
class Information {
}
class Meetinginformation {
}
class Everyone {
	do()
}
class Change {
}
class Request {
}
class People {
	get()
}
class Message {
}
class Comment {
}
class Data {
}
class Architect {
}
class Colleague {
}
Manager --> ProjectManager : modify
Manager --> ProjectManager : create
Manager --> Progress : save
ProjectManager --> Progress : track
Contractor --> Report : enter
Manager --> Information : edit
Manager --> Comment : approve
Contractor o-- Resource : manager
Contractor o-- Information : edit
Contractor --> Progress : save
Contractor --> Data : enter
Architect --> Colleague : supported_by
Contractor --> Minute : see
Manager --> Meetinginformation : edit
Manager --> Task : approve
Manager --> Progress : track
Task o-- Progress
Contractor --> Change : report
Task o-- Category
Contractor --> Question : ask
Meeting o-- Log
Manager --> Category : edit
Meeting o-- Minute
Manager --> Topic : find
Manager --> Log : access
Manager --> Status : save
Manager --> Request : approve
Manager --> Minute : send_out
People --> Information : get
Contractor --> Status : save
Event --> Place : take
Contractor --> Message : send
Manager --> Note : take
Contractor --> Task : see
Manager --> Decision : make
Manager --> Summary : see

@enduml