@startuml
hide circle
class Manager<actor> {
	client
	interest
}
class Contractor<actor> {
	work
	information
	resource
	comment
}
class Architect<actor> {
	colleague
}
class ProjectManager<actor> {
}
class Manager {
	add()
	log_in()
	tell()
	reject()
	make()
	track()
	disapprove()
	see()
	send_out()
	approve()
	take()
	search()
	edit()
	create()
	send()
	talk()
	save()
	log()
	modify()
	access()
	find()
	get()
}
class Contractor {
	log_in()
	correct()
	enter()
	log()
	manage()
	report()
	see()
	ask()
	send()
}
class Question {
}
class Task {
}
class Notification {
}
class List {
}
class Report {
}
class Project {
}
class Resource {
}
class ProjectManager {
	track()
	plan()
}
class Status {
}
class Message {
}
class MeetingMinute {
}
class Decision {
}
class Architect {
	communicate()
	report()
}
class Colleague {
}
class Taskprogress {
}
class People {
	get()
}
class Information {
}
class App {
}
class Summary {
}
class Personnel {
}
class Event {
	take()
}
class Minute {
}
class MeetingLog {
}
class Topic {
}
class Design {
}
class Data {
}
class ProjectCompletion {
}
class MeetingInformation {
}
class Progress {
}
class Everyone {
	know()
}
class Instruction {
}
class Place {
}
class Request {
}
class Comment {
}
class TaskCategory {
}
class Company {
}
class Note {
}
class Change {
}
class Client {
}
class Issue {
}
class Anytime {
}
Contractor --> Data : enter
Manager --> Project : modify
Contractor --> Report : enter
Contractor --> Question : ask
Manager --> Instruction : send_out
ProjectManager --> ProjectCompletion : plan
People --> Information : get
Contractor --> Project : see
Contractor --> Company : report
Manager --> MeetingInformation : edit
Contractor o-- Resource : manage
Contractor --> App : log
Manager --> Note : take
Manager --> Project : create
Manager --> Progress : save
Manager --> MeetingMinute : send_out
Contractor --> MeetingMinute : see
Manager --> Summary : see
Manager --> Status : save
Manager --> MeetingMinute : send
Contractor --> Task : see
Contractor --> Change : report
Manager --> Information : edit
Manager --> Personnel : send
Manager --> App : log
Contractor --> Message : send
Manager --> Instruction : send
Manager o-- Client : talk
Contractor --> Minute : correct
Manager --> MeetingMinute : search
Event --> Place : take
Contractor --> Issue : correct
Architect --> Colleague : supported_by
Manager --> MeetingLog : access
Manager --> Decision : make
Manager --> Request : approve
Manager --> Task : reject
Manager --> Contractor : approve
Manager --> Progress : track
Contractor --> Anytime : enter
Contractor --> Manager : send
Contractor --> Anytime : supported_by
Manager --> TaskCategory : edit
Manager --> Notification : talk
Manager --> Topic : find
Architect --> Design : report
Architect o-- Colleague : communicate
ProjectManager --> Taskprogress : track
Manager --> Comment : reject
Manager --> List : add

@enduml