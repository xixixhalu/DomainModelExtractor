@startuml
hide circle
class Vendor<actor> {
	itemPrice
	service
	item
	product
	pricing
	profile
}
class Consumer<actor> {
	cart
	searchResult
	securityQuestion
	account
	password
}
class WebsiteOwner<actor> {
	customer
	blog
}
class WebsiteEndUser<actor> {
}
class Website {
}
class EndUser {
	use()
	find()
}
class Owner {
	provide()
	offer()
	post()
	approve()
	help()
	suspend()
}
class Catalog {
}
class Discussion {
}
class Post {
}
class Consumer {
	keep()
	subscribe()
	see()
	rate()
	verify()
	do()
	refer()
	sort()
	review()
	add()
	search()
	look()
	reset()
	leave()
	narrow_down()
	get()
	ensure()
	find()
	gain()
	have()
	participate()
	manage()
}
class Communication {
	see()
}
class Access {
}
class Vendor {
	add()
	provide()
	view()
	offer()
	upload()
	communicate()
	ship()
	make()
	list()
	look_up()
	publish()
	improve()
	compare()
	gather()
	buy()
	inform()
	reach()
	manage()
}
class Promotion {
	attract()
}
class Password {
}
class Item {
}
class Comment {
}
class Servicequality {
}
class SearchResult {
}
class Blog {
	highlight()
}
class Purchase {
}
class Time {
}
class Knowledge {
	become()
}
class Account {
}
class Moderator {
	provide()
	encourage()
	post()
	approve()
	help()
	suspend()
}
class Future {
}
class Pricing {
}
class Price {
}
class Recommendation {
}
class Date {
}
class Issue {
}
class Discount {
}
class Order {
}
class Id {
}
class Product {
	be()
	suit()
}
class Video {
}
class Feedback {
}
class IncreaseSale {
}
class Income {
}
class Cart {
}
class Forum {
}
class Event {
	happen()
}
class Resource {
}
class EmailAddress {
}
class Service {
}
class Total {
	determine()
}
class Profile {
}
class Market {
}
class Sale {
}
class WebsiteEndUser {
}
class WebsiteOwner {
}
Consumer --> Access : get
Blog --> Issue : highlight
Total --> Vendor : determine
Owner --> Account : suspend
Owner --> Blog : post
Vendor --> Owner : compare
Vendor --> Discount : provide
Vendor o-- Product : ship
Vendor --> Price : manage
Vendor --> Promotion : offer
Moderator --> Account : suspend
Consumer --> Product : sort
Vendor --> Order : offer
Vendor o-- Profile : upload
Moderator --> Account : approve
Consumer --> Vendor : rate
Vendor o-- Account
Consumer o-- Password : manage
Vendor o-- Item : list
Consumer --> Id : verify
Vendor --> Catalog : add
Vendor --> Market : reach
EndUser --> Owner : find
Vendor --> Income : improve
Consumer --> Product : find
Vendor --> Future : improve
Consumer --> Comment : leave
Consumer o-- Account : manage
Consumer o-- Cart : manage
Moderator --> Sale : encourage
Blog o-- Post
Consumer --> Discussion : participate
Vendor o-- Pricing : make
Forum o-- Discussion
Consumer --> Servicequality : ensure
Vendor --> Post : publish
Consumer --> Forum : search
Website o-- EndUser
Consumer --> Item : add
Vendor --> Price : compare
Vendor o-- Product : add
Owner --> Vendor : supported_by
Consumer o-- SearchResult : narrow_down
Consumer --> Product : search
Owner --> Resource : provide
Website o-- Owner
Consumer --> Recommendation : get
WebsiteEndUser <|-- EndUser
Consumer --> Blog : search
Vendor --> Video : upload
Moderator --> Blog : post
Moderator --> Resource : provide
WebsiteOwner <|-- Owner
Owner --> Account : approve
Product o-- Catalog
Consumer --> Purchase : do
Vendor --> Feedback : gather
Moderator --> Communication : post
Consumer --> EmailAddress : reset
Moderator --> Vendor : supported_by
Item o-- Price
Vendor --> Time : view
Vendor --> IncreaseSale : reach
Owner --> Communication : post
Consumer --> Knowledge : gain
Vendor --> Date : view
Consumer --> Item : see
Vendor o-- Service : improve
Vendor o-- Product : improve

@enduml