@startuml
hide circle
class User<actor> {
	swimmer
	information
	kid
}
class Coach<actor> {
}
class Developer<actor> {
}
class Parent<actor> {
	account
	kid
}
class Treasurer<actor> {
}
class Maintainer<actor> {
}
class Head<actor> {
}
class Kid {
	account
	sign()
	post()
}
class Pdf {
}
class Report {
}
class Detail {
}
class Maintainer {
	see()
	have()
	modify()
	insert()
	delete()
	access()
}
class Amount {
	collect()
}
class Parent {
	edit()
	sign()
	see()
	view()
	login()
}
class Event {
}
class Deadline {
}
class Database {
}
class Coach {
	overwrite()
	edit()
	extract()
	review()
	generate()
	modify()
	expect()
}
class Developer {
	have()
}
class Access {
}
class CSVFile {
}
class User {
	see()
	expect()
}
class Information {
}
class Treasurer {
	see()
}
class Something {
}
class Signup {
	close()
}
class PayeeInformation {
}
class Swimmer {
	sign()
}
class Result {
}
class Option {
}
class UploadEvent {
}
class List {
}
class SourceCode {
}
class RegistrationKey {
}
class Documentation {
}
Coach --> UploadEvent : extract
Parent --> Event : edit
Coach --> Information : review
Coach --> List : edit
Access --> SourceCode : to
Kid --> Deadline : post
Parent --> RegistrationKey : supported_by
Maintainer --> Database : access
Coach --> Signup : expect
Maintainer --> Database : modify
Parent --> PayeeInformation : view
Pdf o-- Report
User --> Event : see
Access --> Documentation : to
Maintainer --> Access : have
Maintainer --> Database : delete
Access --> Database : to
Developer --> Access : have
Parent --> Event : view
Pdf o-- Information
Parent --> Parent : see
Coach --> CSVFile : generate
Coach --> Result : overwrite
User --> Option : see
Coach --> User : expect
User o-- Information : expect
Maintainer --> Database : insert
Coach --> Report : generate
Coach --> Result : modify
Coach --> Information : extract
Amount o-- Detail
Treasurer --> Amount : see
Coach --> Something : modify
Maintainer --> Detail : see

@enduml