@startuml
hide circle
class User<actor> {
	information
	kid
	swimmer
}
class Coach<actor> {
}
class Developer<actor> {
}
class Parent<actor> {
	account
	kid
}
class Treasurer<actor> {
}
class Maintainer<actor> {
}
class Head<actor> {
}
class Kid {
	account
	sign()
	post()
}
class Pdf {
}
class Report {
}
class Detail {
}
class User {
	expect()
	see()
}
class Information {
}
class Maintainer {
	see()
	access()
	insert()
	delete()
	modify()
	have()
}
class Swimmer {
	sign()
}
class Database {
}
class Parent {
	sign()
	login()
	see()
	edit()
	view()
}
class Event {
}
class Access {
}
class Coach {
	overwrite()
	generate()
	expect()
	review()
	extract()
	modify()
	edit()
}
class UploadEvent {
}
class Result {
}
class PayeeInformation {
}
class Developer {
	have()
}
class Signup {
	close()
}
class Treasurer {
	see()
}
class Amount {
	collect()
}
class Something {
}
class Option {
}
class CSVFile {
}
class Deadline {
}
class List {
}
class Documentation {
}
class RegistrationKey {
}
class SourceCode {
}
Coach --> Report : generate
User --> Event : see
Coach --> List : edit
Access --> Documentation : to
Maintainer --> Database : insert
Maintainer --> Detail : see
Maintainer --> Database : delete
Parent --> RegistrationKey : supported_by
Maintainer --> Database : modify
Coach --> Signup : expect
Amount o-- Detail
Parent --> Event : edit
Treasurer --> Amount : see
Access --> Database : to
Maintainer --> Database : access
Access --> SourceCode : to
Maintainer --> Access : have
Parent --> Event : view
Coach --> Information : review
Coach --> User : expect
Pdf o-- Information
Coach --> Result : overwrite
Parent --> Parent : see
Coach --> Information : extract
Coach --> Something : modify
Coach --> UploadEvent : extract
User --> Option : see
Coach --> Result : modify
Coach --> CSVFile : generate
Parent --> PayeeInformation : view
Kid --> Deadline : post
User o-- Information : expect
Developer --> Access : have
Pdf o-- Report

@enduml