@startuml
hide circle
class User<actor> {
	patient
}
class Office<actor> {
	behalf
}
class Doctor<actor> {
	behalf
	patient
	schedulingApplication
	data
}
class Administrator<actor> {
}
class Developer<actor> {
}
class Admin {
	profession
	customize()
}
class Doctor {
	recommend()
	want()
	view()
	integrate()
	edit()
	fill_out()
	choose()
	fill()
	match()
}
class Progress {
}
class Administrator {
	retrieve()
	save()
}
class User {
	add()
	track()
	assign()
	generate()
	import()
	export()
	delete()
	view()
	edit()
	access()
	attach()
	download()
	have()
	trust()
	create()
	upload()
	manage()
}
class PatientRecord {
}
class OrderForm {
	purchase()
}
class CSVFile {
	have()
}
class Information {
	train()
	use()
}
class Product {
	recommend()
}
class Inventory {
}
class Document {
}
class Report {
}
class Patient {
	recommend()
}
class VendorProductInformation {
}
class Form {
}
class CsvFile {
}
class Task {
}
class Set {
	recommend()
}
class Developer {
	protect()
	need()
}
class Data {
}
class Patientrecord {
}
class Level {
}
class Allergy {
}
class Medication {
}
class Trialend {
	end()
}
class VisitDetail {
}
class Application {
	handle()
}
class ProductInfo {
}
class Portal {
}
class App {
}
class Behalf {
}
class Invoice {
}
class Subscription {
	end()
}
User --> Form : delete
User --> Product : add
Doctor o-- Patient : choose
User --> Task : generate
Application --> Information : handle
CSVFile --> Information : have
User --> Task : assign
User --> Task : have
User --> VisitDetail : edit
Doctor o-- Patient : match
Doctor --> Product : recommend
User --> Set : delete
User --> Data : attach
User --> CsvFile : supported_by
User --> Information : access
Doctor --> Set : choose
User --> Level : supported_by
User --> Inventory : manage
User --> CSVFile : export
User --> Form : download
User --> Invoice : create
Administrator --> Document : save
User --> ProductInfo : export
User --> Data : manage
Doctor --> Report : view
Admin --> Portal : customize
User --> Patientrecord : create
Doctor --> Product : choose
Doctor --> Product : match
Doctor --> OrderForm : fill
User --> Level : generate
Doctor o-- Patient : recommend
User --> Set : download
User --> CSVFile : upload
Doctor --> App : want
Doctor --> Progress : edit
User --> Allergy : add
User --> VendorProductInformation : import
User --> Behalf : manage
User o-- Patient : add
Developer --> App : protect
User --> Form : add
Doctor --> OrderForm : fill_out
User --> Doctor : assign
User --> CsvFile : import
User --> Medication : add
User --> PatientRecord : attach

@enduml