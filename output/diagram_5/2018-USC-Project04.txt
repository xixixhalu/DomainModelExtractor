@startuml
hide circle
class User<actor> {
	patient
}
class Office<actor> {
	doctor
}
class Doctor<actor> {
	behalf
	patient
	schedulingApplication
	data
}
class Admin<actor> {
	profession
}
class Administrator<actor> {
}
class Developer<actor> {
}
class Info {
}
class Record {
}
class Document {
}
class User {
	delete()
	attach()
	view()
	track()
	access()
	manage()
	generate()
	trust()
	import()
	export()
	add()
	have()
	edit()
	assign()
	create()
	download()
}
class Medication {
}
class Behalf {
}
class CSVFile {
	have()
	say()
}
class Product {
	purchase()
}
class Doctor {
	view()
	want()
	fill_out()
	choose()
	edit()
	recommend()
	match()
}
class Report {
	generate()
}
class Invoice {
}
class Data {
	preserve()
}
class Admin {
	customize()
}
class App {
	integrate()
}
class Patient {
	recommend()
	preserve()
}
class Information {
	train()
}
class Allergy {
}
class Administrator {
	retrieve()
	save()
}
class Developer {
	protect()
}
class Task {
}
class Office {
	manage()
}
class VisitDetail {
}
class OrderForm {
	purchase()
}
class File {
}
class Progress {
}
class Form {
}
class Inventory {
}
class Trial {
	end()
}
class Subscription {
	end()
}
class Customer {
}
class Application {
}
class VendorProductInformation {
}
class Level {
}
class CsvFile {
}
Product o-- Info
User --> Inventory : manage
User --> Product : add
Task --> Doctor : to
CSVFile --> Product : say
Patient o-- Document
User --> VisitDetail : view
Patient o-- Record
Administrator --> Document : save
Doctor o-- Patient : choose
Patient --> Product : to
Doctor --> Report : view
User --> Form : add
Doctor --> Product : choose
Data --> Record : to
Doctor --> Product : recommend
User --> CsvFile : supported_by
User --> Invoice : create
User --> Data : manage
Doctor --> File : recommend
Info --> CSVFile : to
User --> Customer : track
User --> Task : have
User --> Info : export
User --> Application : trust
Doctor o-- Patient : match
User --> Information : access
Doctor --> Progress : edit
User --> VisitDetail : edit
User --> VendorProductInformation : import
User --> Record : create
User --> Allergy : add
User --> Data : attach
User --> Task : assign
CSVFile --> Information : have
Doctor --> OrderForm : fill_out
Office --> Data : manage
User --> Form : download
User --> VisitDetail : add
User --> Medication : add
User --> Form : delete
Developer --> App : protect
Office --> Inventory : manage
Doctor --> App : want
User --> Level : supported_by
User --> Task : generate
User --> Behalf : manage
Office --> Behalf : manage

@enduml