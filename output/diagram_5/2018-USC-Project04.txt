@startuml
hide circle
class User<actor> {
	patient
}
class Office<actor> {
	doctor
}
class Doctor<actor> {
	schedulingApplication
	behalf
	patient
	data
}
class Admin<actor> {
	profession
}
class Administrator<actor> {
}
class Developer<actor> {
}
class Record {
}
class Info {
}
class User {
	attach()
	manage()
	export()
	download()
	track()
	create()
	generate()
	delete()
	trust()
	view()
	have()
	add()
	import()
	access()
	assign()
}
class Behalf {
}
class Administrator {
	save()
	retrieve()
}
class CSVFile {
	say()
	have()
}
class Product {
}
class Invoice {
}
class Developer {
	protect()
}
class App {
}
class Doctor {
	fill_out()
	choose()
	integrate()
	match()
	view()
	edit()
	want()
	recommend()
}
class Office {
	manage()
}
class Patient {
	recommend()
}
class Information {
	user()
}
class File {
}
class Patientdocument {
}
class Task {
}
class Inventory {
}
class Form {
}
class VendorProductInformation {
}
class OrderForm {
	purchase()
}
class Customer {
}
class Trial {
	end()
}
class Progress {
}
class Subscription {
	end()
}
class Data {
}
class Allergy {
}
class Admin {
	customize()
}
class Application {
}
class Report {
}
class Medication {
}
class CsvFile {
}
class Level {
}
CSVFile --> Product : say
User --> Data : manage
User --> Product : add
User --> Invoice : create
User --> Allergy : add
User --> Form : download
User --> Task : assign
Developer --> App : protect
CSVFile --> Information : have
User --> VendorProductInformation : import
Doctor o-- Patient : choose
User --> Record : create
User --> Application : trust
Office --> Inventory : manage
Office --> Behalf : manage
Office --> Data : manage
Doctor --> App : want
User --> Inventory : manage
Doctor --> Report : view
User --> Form : delete
User --> Customer : track
Doctor o-- Patient : match
User --> Form : add
Doctor --> Product : recommend
User --> Data : attach
Product o-- Info
User --> Information : access
Doctor --> Product : choose
Doctor --> OrderForm : fill_out
Doctor --> File : recommend
User --> Medication : add
User --> CsvFile : supported_by
User --> Behalf : manage
Doctor --> Progress : edit
Administrator --> Patientdocument : save
User --> Task : generate
Patient o-- Record
User --> Info : export
User --> Level : supported_by
User --> Task : have

@enduml