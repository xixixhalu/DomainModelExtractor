@startuml
hide circle
class User<actor> {
	profile
	member
	account
	profilePage
}
class Patient<actor> {
	supportGroup
	invitation
	wall
	profile
	event
	calendar
	supportNetwork
}
class Support<actor> {
	patient
}
class Administrator<actor> {
}
class Family<actor> {
}
class Member<actor> {
	network
}
class Admin<actor> {
}
class User {
	delete()
	update()
	access()
	suspend()
	manage()
	block()
	report()
}
class Member {
	notify()
	check()
	ask()
	publish()
	receive()
	get()
	decide()
	help()
	send()
}
class Resource {
}
class Friend {
	notify()
	ask()
}
class Support {
	receive()
	get()
}
class Family {
	love()
	check()
	send()
}
class Patient {
	sign_up()
	ask()
	get()
	contact()
	add()
	post()
	have()
	share()
	provide()
	decide()
	allow()
	pull()
	attend()
	send()
}
class Profile {
}
class Account {
}
class Money {
	love()
}
class Link {
	add()
	sign()
}
class Admin {
	view()
	post()
}
class Announcement {
}
class Statistics {
}
class Group {
	notify()
	access()
}
class Everyone {
}
class Notification {
}
class Messaging {
}
class Kind {
}
class Calendar {
}
class Junk {
}
class Message {
}
class Information {
}
class Network {
	have()
}
class Behalf {
}
class Event {
}
class PrivacySetting {
}
class Appointment {
}
class AdMessage {
}
class HealthCondition {
}
class Administrator {
	delete()
	suspense()
}
class Invitation {
}
Patient o-- Event : attend
Support o-- Group
Announcement --> Group : to
Network --> PrivacySetting : have
User --> Information : update
Patient --> Group : supported_by
Patient o-- Profile : share
Member --> Link : send
Calendar o-- Event
Patient --> Appointment : have
Group --> Kind : access
Announcement --> Everyone : to
User o-- Member : manage
Patient --> Behalf : post
Message --> Group : to
User o-- Account : suspend
Member --> Money : send
Patient o-- Calendar : share
Support --> Notification : get
User --> Junk : report
User o-- Profile : access
User --> AdMessage : report
User o-- Account : delete
User --> Message : block
Family --> Money : send
Admin --> Announcement : post
Patient --> Information : get
Patient --> Message : send
Patient --> Patient : contact
Patient --> HealthCondition : have
Group --> Group : notify
Admin --> Statistics : view
Administrator --> Account : delete
Patient o-- Event : add
Patient --> Messaging : send
Patient --> Member : pull
Patient --> Friend : pull
Member --> Resource : receive
Member o-- Network : decide
Support o-- Network
Group --> Everyone : notify
Patient o-- Invitation : share
Administrator --> Account : suspense
Support --> Resource : receive
Admin --> Behalf : post
Member --> Notification : get

@enduml