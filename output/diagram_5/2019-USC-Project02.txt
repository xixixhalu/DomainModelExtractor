@startuml
hide circle
class User<actor> {
	tutor
	schedule
	learningprogress
	profile
	requestRecord
}
class Tutor<actor> {
	scheduleavailability
	information
	student
	hour
	availability
}
class Student<actor> {
	tutor
}
class Maintainer<actor> {
}
class Leader<actor> {
}
class Tester<actor> {
}
class Programmer<actor> {
}
class FeasibilityAnalysis<actor> {
}
class ProjectArchitect<actor> {
}
class Client<actor> {
}
class SystemArchitect<actor> {
}
class StudentUser<actor> {
	language
}
class Platform {
	capability
}
class User {
	choose()
	use()
	find()
	have()
	work()
	consult()
	check()
	exchange()
	need()
	sign()
	get()
	learn()
	catch_up()
	communicate()
	catch()
	input()
	visit()
	navigate()
	sign_up()
}
class CustomerService {
}
class Tutor {
	offer()
	accept()
	share()
	input()
	update()
	post()
	get()
	need()
}
class TutoringRequest {
}
class Student {
	read()
	coomplete()
	reschedule()
	make()
	request()
	cancel()
	complete()
	watch()
}
class Description {
}
class Maintainer {
	manage()
	understand()
	upgrade()
}
class Resource {
}
class Programmer {
	prioritize()
	get()
}
class Paymentmethod {
}
class Thought {
}
class Task {
}
class Tester {
	write()
}
class Project {
}
class Feasibilityanalysis {
	figure()
	figure_out()
}
class Possibility {
	fit()
}
class Courseschedulechoice {
}
class ProjectArchitect {
	get()
}
class Detail {
}
class Course {
	display()
}
class PresentationMaterial {
	include()
}
class Developer {
	support()
}
class Blog {
}
class Leader {
	learn()
}
class Information {
	provide()
}
class Availability {
	reflect()
}
class StudentUser {
	schedule()
}
class PaymentMethod {
}
class Technology {
}
class RequestForm {
}
class Client {
	have()
}
class Page {
}
class StudyProcess {
}
class Time {
	choose()
}
class ScheduleChange {
	happen()
}
class CourseVideo {
}
class Fact {
}
class Classmate {
}
class Password {
}
class RequestRecord {
}
class EvaluationForm {
}
class Online {
}
class Schedule {
}
class TutoringTime {
}
class LessonVideo {
}
class Scheduleavailability {
}
class SystemArchitect {
	integrate()
}
class Application {
	log()
}
class Module {
}
class ProgramELA {
	provide()
}
class Confliction {
}
class Tutoringtime {
}
class Question {
}
class Instructor {
	match()
}
class Language {
}
class Lesson {
}
class Googlecom {
}
class Comment {
}
class Notification {
}
class Key {
	feature()
}
class Something {
	happen()
}
class IntegrationTest {
}
class Profile {
}
class Company {
}
class Understanding {
}
class Username {
}
class AutoResponse {
}
User --> PaymentMethod : need
Tutor o-- Information : offer
Leader --> Company : learn
User --> CustomerService : communicate
User --> Information : learn
Developer --> Technology : support
Maintainer --> Technology : understand
Information --> Understanding : provide
Maintainer --> Information : manage
User --> Application : use
User --> Password : sign
Student --> Information : read
Student --> RequestForm : coomplete
Tutor --> TutoringRequest : accept
User --> Courseschedulechoice : have
Availability --> Tutor : reflect
User --> Username : sign
Client --> Project : have
User o-- RequestRecord : check
User --> Information : consult
SystemArchitect --> Module : integrate
Student --> Comment : make
User --> AutoResponse : get
User --> Profile : supported_by
Student --> Description : read
User o-- Schedule : input
ProjectArchitect --> Detail : get
Student --> EvaluationForm : complete
User --> Password : supported_by
Course --> Page : display
Availability --> Fact : reflect
User --> Notification : get
Tutor --> Availability : supported_by
SystemArchitect --> Confliction : integrate
Student --> Online : watch
Student --> Tutor : supported_by
Maintainer --> Resource : upgrade
Tutor --> PresentationMaterial : share
User --> Classmate : supported_by
User --> StudyProcess : catch
User o-- Schedule : check
User o-- Tutor : consult
User --> CustomerService : supported_by
Student --> Tutoringtime : request
Student --> Lesson : read
User --> StudyProcess : supported_by
User --> Paymentmethod : choose
User --> Time : get
Tutor --> Blog : post
Student --> TutoringTime : cancel
Tester --> IntegrationTest : write
ProjectArchitect --> Project : get
User --> Question : have
Programmer --> Description : get
Possibility --> Project : fit
Student --> Blog : read
User --> Thought : exchange
Tutor o-- Schedule : get
Student --> Page : read
Tutor --> CourseVideo : update
Leader --> Information : learn
Student --> LessonVideo : watch
Feasibilityanalysis --> Possibility : figure_out
User --> Username : supported_by
Programmer --> Task : prioritize
Instructor --> Language : match
User --> Classmate : exchange
Student o-- Tutor : request
User --> Googlecom : find
Programmer --> Client : get
Tutor o-- Availability : accept
User o-- Profile : use
Tester --> Project : write
Tutor o-- Scheduleavailability : input
Feasibilityanalysis --> Possibility : figure

@enduml