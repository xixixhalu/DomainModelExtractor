@startuml
hide circle
class User<actor> {
	profile
	tutor
	learningProgress
	requestRecord
	schedule
}
class Tutor<actor> {
	hour
	information
	availability
	student
	scheduleAvailability
}
class Student<actor> {
	tutor
}
class Maintainer<actor> {
}
class Leader<actor> {
}
class Tester<actor> {
}
class Programmer<actor> {
}
class FeasibilityAnalysis<actor> {
}
class ProjectArchitect<actor> {
}
class Client<actor> {
}
class SystemArchitect<actor> {
}
class StudentUser<actor> {
	language
}
class Platform {
	capability
}
class Course {
	material
}
class Video {
}
class Change {
	happen()
}
class Tutoring {
}
class Request {
}
class Developer {
	understand()
	user()
}
class Student {
	cancel()
	make()
	complete()
	read()
	watch()
	request()
	reschedule()
}
class Description {
}
class User {
	check()
	learn()
	user()
	consult()
	choose()
	sign_up()
	input()
	catch_up()
	work()
	get()
	need()
	exchange()
	have()
}
class RequestRecord {
}
class Autoresponse {
}
class Tutor {
	accept()
	post()
	share()
	input()
	offer()
	update()
	get()
}
class Blog {
}
class Availability {
	reflect()
}
class FeasibilityAnalysis {
	figure_out()
}
class Programmer {
	prioritize()
	get()
}
class Task {
}
class Schedule {
}
class SystemArchitect {
	integrate()
}
class Module {
}
class PaymentMethod {
}
class Instructor {
	match()
}
class Possibility {
	fit()
}
class ProjectArchitect {
	get()
	complete()
}
class Maintainer {
	upgrade()
	understand()
	manage()
	user()
}
class Resource {
}
class Something {
	happen()
}
class Time {
}
class Need {
	user()
}
class Courseschedulechoice {
}
class Question {
}
class Information {
}
class Detail {
}
class Thought {
}
class Comment {
}
class Email {
}
class LessonVideo {
}
class Leader {
	learn()
}
class Tester {
	write()
}
class Technology {
}
class Streamingfeature {
}
class Requestform {
}
class EvaluationForm {
}
class Language {
}
class Accordance {
}
class PresentationMaterial {
	include()
}
class ProgramELA {
	provide()
}
class Application {
}
class Fact {
}
class IntegrationTest {
}
class Notification {
}
class Page {
}
class Profile {
	log_in()
}
class Client {
	have()
}
class StudyProcess {
}
class Linkedin {
}
class Customerservice {
}
class StudentUser {
}
class Classmate {
}
class Password {
}
class Username {
}
Student o-- User
User --> Courseschedulechoice : have
Tutor --> PresentationMaterial : share
User --> PaymentMethod : choose
Profile --> Linkedin : supported_by
User --> Information : learn
User --> Question : have
User --> Customerservice : supported_by
User o-- Schedule : check
Maintainer --> Technology : understand
User --> Information : consult
Tutor --> Video : update
SystemArchitect --> Module : integrate
Developer --> Technology : understand
Schedule o-- Availability
StudentUser <|-- User
User --> Application : user
FeasibilityAnalysis --> Possibility : figure_out
Student --> Description : read
ProjectArchitect --> Detail : get
User --> PaymentMethod : need
Tutor o-- Information : offer
User --> Classmate : supported_by
Availability --> Fact : reflect
Instructor --> Schedule : match
User --> Time : get
User --> Thought : exchange
Course o-- Video
User o-- RequestRecord : check
Tester --> IntegrationTest : write
Need --> Streamingfeature : user
Tutoring o-- Time
Schedule o-- Change
Student --> Comment : make
Tutoring o-- Request
User --> Autoresponse : get
User --> Notification : get
Possibility --> ProjectArchitect : fit
Student --> Requestform : complete
Tutor --> Availability : supported_by
User --> Email : get
Student --> Time : cancel
User --> Password : supported_by
Student --> EvaluationForm : complete
Tutor --> Blog : post
Student --> LessonVideo : watch
Maintainer --> Resource : upgrade
Student --> Page : read
User --> Username : supported_by
Leader --> Information : learn
ProjectArchitect --> ProjectArchitect : get
Instructor --> Language : match
Tutor o-- Availability : input
Student --> Blog : read
User --> StudyProcess : supported_by
User o-- Schedule : input
Student --> Time : request
Tutor --> Accordance : accept
Tutor o-- Schedule : get
Maintainer --> Information : manage
Programmer --> Task : prioritize
Tester --> ProjectArchitect : write
Tutor --> Request : accept
Programmer --> Description : get

@enduml