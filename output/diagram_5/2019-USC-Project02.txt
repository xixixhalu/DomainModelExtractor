@startuml
hide circle
class User<actor> {
	learningProgress
	schedule
	profile
	requestRecord
	tutor
}
class Tutor<actor> {
	scheduleAvailability
	student
	availability
	information
	hour
}
class Student<actor> {
	tutor
}
class Maintainer<actor> {
}
class Developer<actor> {
}
class Leader<actor> {
}
class Tester<actor> {
}
class Programmer<actor> {
}
class FeasibilityAnalysis<actor> {
}
class ProjectArchitect<actor> {
}
class Client<actor> {
}
class SystemArchitect<actor> {
}
class StudentUser<actor> {
	language
}
class Platform {
	capability
}
class Course {
	material
}
class Class {
}
class Change {
	happen()
}
class Video {
}
class ScheduleChoice {
}
class Tutoring {
}
class Request {
}
class Architect {
	get()
}
class Record {
}
class Form {
}
class Programmer {
	get()
	prioritize()
}
class Task {
}
class User {
	sign_up()
	use()
	exchange()
	consult()
	input()
	catch_up()
	get()
	have()
	learn()
	pair()
	choose()
	check()
	need()
}
class Information {
}
class Leader {
	learn()
}
class Student {
	request()
	reschedule()
	read()
	make()
	complete()
	watch()
	cancel()
}
class Description {
}
class ProgramELA {
	provide()
}
class Tutor {
	offer()
	input()
	get()
	accept()
	post()
	book()
	update()
	share()
}
class Schedule {
}
class Maintainer {
	understand()
	manage()
	upgrade()
}
class Email {
}
class SystemArchitect {
	integrate()
}
class Module {
}
class PaymentMethod {
	work()
}
class Comment {
}
class Need {
	use()
}
class Technology {
}
class Client {
	have()
}
class Developer {
	understand()
}
class Blog {
}
class Instructor {
	match()
}
class LessonVideo {
}
class Resource {
}
class AutoResponse {
}
class Project {
	complete()
}
class Time {
}
class Tester {
	write()
}
class Availability {
	reflect()
}
class Fact {
}
class FeasibilityAnalysis {
	figure_out()
}
class Feature {
}
class Possibility {
	fit()
}
class Profile {
	log_in()
}
class IntegrationTest {
}
class Accordance {
}
class PresentationMaterial {
	include()
}
class Question {
}
class Thought {
}
class Page {
}
class Something {
	happen()
}
class Detail {
}
class EvaluationForm {
}
class Language {
}
class Application {
}
class Notification {
}
class Username {
}
class Password {
}
class Linkedin {
}
class CustomerService {
}
class Classmate {
}
class StudyProcess {
}
class StudentUser {
}
class ProjectArchitect {
}
User --> ScheduleChoice : have
Tutor --> Fact : book
Tutor o-- Availability : input
Student o-- User
User --> Username : supported_by
Maintainer --> Technology : understand
Tutor --> Accordance : accept
Tutoring o-- Request
User --> Question : have
Request o-- Form
Developer --> Technology : understand
Tutor --> Request : accept
User --> Notification : get
StudentUser <|-- User
Instructor --> Schedule : match
User o-- Schedule : input
Availability --> Fact : reflect
User --> Password : supported_by
User --> Thought : exchange
Maintainer --> Information : manage
User --> Time : get
Course o-- Video
Tutor --> Blog : post
User --> Information : learn
Student --> Time : reschedule
ProjectArchitect <|-- Architect
Schedule o-- Change
Student --> Page : read
Programmer --> Description : get
Schedule o-- Class
User --> Record : check
User o-- Schedule : check
Student --> Blog : read
Schedule o-- Availability
Profile --> Linkedin : supported_by
Tutor o-- Information : offer
User --> Email : get
User --> PaymentMethod : choose
Architect --> Detail : get
Tutor o-- Schedule : get
Request o-- Record
Student --> LessonVideo : watch
Need --> Feature : use
User --> CustomerService : supported_by
Programmer --> Task : prioritize
Student --> EvaluationForm : complete
SystemArchitect --> Module : integrate
Maintainer --> Resource : upgrade
Tutor --> Availability : supported_by
Instructor --> Language : match
FeasibilityAnalysis --> Possibility : figure_out
Tutor --> PresentationMaterial : share
Student --> Time : cancel
Tutoring o-- Time
User --> Information : consult
User --> AutoResponse : get
User --> PaymentMethod : need
Student --> Time : request
User --> Classmate : supported_by
Leader --> Information : learn
Possibility --> Project : fit
Architect --> Project : get
Tutor --> Class : get
Student --> Comment : make
Tester --> IntegrationTest : write
Project o-- Architect
Course o-- ScheduleChoice
User --> Application : use
Tutor --> Video : update
User --> StudyProcess : supported_by
Student --> Description : read
Student --> Form : complete
Tester --> Project : write

@enduml