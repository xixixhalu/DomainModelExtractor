@startuml
hide circle
class User<actor> {
	learningProgress
	requestRecord
	tutor
	schedule
	profile
}
class Tutor<actor> {
	availability
	information
	student
	hour
	scheduleAvailability
}
class Student<actor> {
	tutor
}
class Maintainer<actor> {
}
class Developer<actor> {
}
class Leader<actor> {
}
class Tester<actor> {
}
class Programmer<actor> {
}
class FeasibilityAnalysis<actor> {
}
class ProjectArchitect<actor> {
}
class Client<actor> {
}
class SystemArchitect<actor> {
}
class StudentUser<actor> {
	language
}
class Platform {
	capability
}
class Course {
	material
}
class Tutoring {
}
class Request {
}
class Change {
	happen()
}
class Class {
}
class Architect {
	get()
}
class Record {
}
class Form {
}
class ScheduleChoice {
}
class Video {
}
class Tester {
	write()
}
class Project {
	complete()
}
class FeasibilityAnalysis {
	figure_out()
}
class Possibility {
	fit()
}
class Student {
	make()
	watch()
	cancel()
	complete()
	reschedule()
	read()
	request()
}
class Blog {
}
class Profile {
	log_in()
}
class ProgramELA {
	provide()
}
class User {
	consult()
	need()
	choose()
	pair()
	learn()
	have()
	exchange()
	use()
	input()
	sign_up()
	catch_up()
	get()
	check()
}
class PaymentMethod {
	work()
}
class Description {
}
class Client {
	have()
}
class Page {
}
class Tutor {
	update()
	offer()
	share()
	input()
	post()
	book()
	get()
	accept()
}
class Question {
}
class Time {
}
class Information {
}
class PresentationMaterial {
	include()
}
class Schedule {
}
class Something {
	happen()
}
class Application {
}
class Developer {
	understand()
}
class Technology {
}
class Programmer {
	get()
	prioritize()
}
class Task {
}
class Comment {
}
class Accordance {
}
class Need {
	use()
}
class Feature {
}
class Thought {
}
class Instructor {
	match()
}
class Language {
}
class EvaluationForm {
}
class Availability {
	reflect()
}
class Fact {
}
class Leader {
	learn()
}
class LessonVideo {
}
class Maintainer {
	understand()
	upgrade()
	manage()
}
class SystemArchitect {
	integrate()
}
class Module {
}
class Resource {
}
class AutoResponse {
}
class IntegrationTest {
}
class Notification {
}
class Detail {
}
class Email {
}
class Classmate {
}
class ProjectArchitect {
}
class StudyProcess {
}
class Username {
}
class CustomerService {
}
class Password {
}
class Linkedin {
}
class StudentUser {
}
User o-- Schedule : check
Tutor --> Blog : post
User --> Password : supported_by
Possibility --> Project : fit
User --> Information : learn
SystemArchitect --> Module : integrate
Instructor --> Schedule : match
Course o-- Video
Request o-- Form
User --> Application : use
Maintainer --> Information : manage
Instructor --> Language : match
Profile --> Linkedin : supported_by
Schedule o-- Change
User --> PaymentMethod : choose
Student --> Description : read
Programmer --> Description : get
Course o-- ScheduleChoice
StudentUser <|-- User
User --> Classmate : supported_by
Student --> Time : request
User --> Record : check
Student --> EvaluationForm : complete
Developer --> Technology : understand
User --> ScheduleChoice : have
Architect --> Project : get
Tutor --> Availability : supported_by
Tutoring o-- Time
Student --> Time : cancel
Maintainer --> Resource : upgrade
Student --> Page : read
Tutor --> Request : accept
Schedule o-- Class
ProjectArchitect <|-- Architect
Programmer --> Task : prioritize
User --> AutoResponse : get
Tutor --> Fact : book
User --> StudyProcess : supported_by
Tutor --> Class : get
Tester --> Project : write
Student --> Comment : make
Tutor --> Video : update
Availability --> Fact : reflect
Tester --> IntegrationTest : write
User --> Username : supported_by
User --> Question : have
Tutor --> Accordance : accept
User --> Notification : get
Leader --> Information : learn
Tutor o-- Availability : input
FeasibilityAnalysis --> Possibility : figure_out
Project o-- Architect
User --> Time : get
Request o-- Record
Architect --> Detail : get
User --> CustomerService : supported_by
Student --> Form : complete
Tutor o-- Information : offer
User --> Information : consult
Student --> LessonVideo : watch
Student --> Blog : read
Tutor o-- Schedule : get
Student --> Time : reschedule
Maintainer --> Technology : understand
Tutoring o-- Request
Need --> Feature : use
Tutor --> PresentationMaterial : share
User o-- Schedule : input
User --> Thought : exchange
Schedule o-- Availability
User --> Email : get
User --> PaymentMethod : need
Student o-- User

@enduml