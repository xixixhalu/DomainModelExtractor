@startuml
hide circle
class User<actor> {
	report
	identity
	account
	contactDetail
	problem
}
class Admin<actor> {
}
class Organization<actor> {
	client
}
class VRSAdmin<actor> {
}
class VRS<actor> {
}
class Developer<actor> {
}
class Employee<actor> {
	anonymity
	profileDetail
	case
}
class VRSSubjectMatterExpert<actor> {
}
class Workplace {
}
class ViolenceCase {
}
class Update {
}
class ManagementSystem {
}
class SubjectMatterExpert {
	verify()
	notify()
}
class Management {
}
class Section {
}
class Employee {
	accuse()
	file()
	have()
	check()
	post()
	expect()
	edit()
	track()
	view()
	assure()
}
class Status {
	file()
}
class Organization {
	check()
	understand()
	make()
	view()
	redirect()
}
class Developer {
	minimize()
	reuse()
	encrypt()
}
class VRS {
	delete()
	file()
	form()
	generate()
	filter_out()
	assign()
	prioritize()
	resolve()
	email()
}
class Report {
	contain()
}
class State {
}
class Complaint {
	assign()
	report()
	file()
}
class Admin {
	generate()
	address()
	filter()
	edit()
	download()
	view()
}
class Assignee {
}
class Security {
	maintain()
}
class User {
	submit()
	expedite()
	add()
	update()
}
class Process {
}
class Anonymity {
	maintain()
}
class Information {
}
class Case {
}
class Violence {
	mitigate()
}
class Ticket {
}
class Comment {
}
class Account {
	be()
}
class Term {
}
class Data {
}
class DevelopmentTime {
}
class MediaFile {
}
class News {
}
class Credibility {
	investigate()
}
class Cost {
}
class ProfileDetail {
}
class Time {
	save()
}
class Problem {
	know()
	resolve()
}
class ContactDetail {
}
class Communication {
}
class Password {
	store()
	send()
}
class VRSAdmin {
}
class VRSSubjectMatterExpert {
}
class Environment {
}
Employee o-- Case : view
Workplace o-- Update
Admin --> Report : generate
VRS --> Report : assign
SubjectMatterExpert --> Organization : notify
VRS o-- Admin
Admin --> Case : view
Ticket o-- Status
Employee --> Status : check
Employee o-- ProfileDetail : edit
Information --> Complaint : to
Organization --> Term : understand
Employee o-- Anonymity : expect
VRSSubjectMatterExpert <|-- SubjectMatterExpert
Organization --> Update : check
Developer --> Data : encrypt
User --> Information : add
Environment <|-- Employee
Developer --> ManagementSystem : reuse
Developer --> DevelopmentTime : minimize
VRS --> Organization : email
User o-- ContactDetail : update
Comment o-- Section
VRS --> Case : filter_out
VRS --> Report : resolve
Report --> MediaFile : contain
Admin --> Complaint : address
Employee --> Communication : have
Organization --> Report : view
Employee --> Complaint : file
User o-- Report : submit
VRSAdmin <|-- Admin
Developer --> Management : reuse
Organization --> State : understand
VRS --> News : email
Admin --> Ticket : filter
Organization --> Employee : redirect
Admin --> Status : edit
Employee --> Section : have
Employee --> Complaint : post
SubjectMatterExpert --> Credibility : verify
Case o-- ManagementSystem
VRS --> Complaint : delete
Admin --> Case : download
Employee --> Organization : to
Employee --> Report : file
VRS --> ViolenceCase : prioritize
Ticket o-- Management
Admin --> Assignee : edit
User --> Comment : add
VRS o-- SubjectMatterExpert
Developer --> Cost : minimize
Admin --> Report : filter
User --> Process : expedite
Workplace o-- ViolenceCase
Employee --> Status : track
VRS --> Report : generate
Comment --> Report : to

@enduml