@startuml
hide circle
class User<actor> {
	identity
	report
	account
	contactDetail
	problem
}
class Admin<actor> {
}
class Organization<actor> {
	client
}
class VRSAdmin<actor> {
}
class VRS<actor> {
}
class Developer<actor> {
}
class Employee<actor> {
	case
	profileDetail
	anonymity
}
class VRSSubjectMatterExpert<actor> {
}
class SubjectMatterExpert {
	verify()
	notify()
}
class Section {
}
class Report {
	contain()
	file()
}
class Developer {
	encrypt()
	reuse()
	minimize()
}
class Admin {
	resolve()
	address()
	form()
	filter()
	email()
	generate()
	delete()
	assign()
	file()
	view()
	edit()
	filter_out()
	prioritize()
	download()
}
class Employee {
	check()
	have()
	track()
	expect()
	post()
	file()
	view()
	edit()
}
class Complaint {
	file()
	assign()
}
class User {
	expedite()
	submit()
	update()
	add()
}
class Credibility {
	file()
	investigate()
}
class News {
}
class Organization {
	redirect()
	check()
	make()
	understand()
	view()
}
class Status {
}
class Anonymity {
}
class State {
}
class DevelopmentTime {
}
class Cost {
}
class Ticket {
}
class ProfileDetail {
}
class Process {
}
class Account {
	be()
}
class Data {
}
class Workplaceviolencecase {
}
class MediaFile {
	tag()
}
class Comment {
}
class Assignee {
}
class Case {
}
class Term {
}
class Information {
}
class Waycommunication {
}
class WorkplaceUpdate {
}
class Riskcomplaint {
}
class ContactDetail {
}
class VRSAdmin {
}
class VRSSubjectMatterExpert {
}
class VRS {
}
VRS o-- Admin
Employee --> Complaint : post
Admin --> Case : filter_out
Admin --> Case : view
Comment o-- Section
Employee o-- ProfileDetail : edit
VRS o-- SubjectMatterExpert
User o-- Report : submit
Organization --> Term : understand
Ticket o-- Status
User --> Process : expedite
Admin --> News : email
User --> Information : add
Admin --> Report : generate
Employee --> Complaint : file
Admin --> Organization : email
Employee --> Waycommunication : have
Organization --> Employee : redirect
Organization --> Report : view
Admin --> Status : edit
Employee --> Section : have
Developer --> Data : encrypt
Employee --> Status : check
Organization --> WorkplaceUpdate : check
Admin --> Ticket : filter
Admin --> Complaint : delete
Admin --> Workplaceviolencecase : prioritize
Employee o-- Anonymity : expect
Admin --> Riskcomplaint : address
Admin --> Report : filter
SubjectMatterExpert --> Organization : notify
Organization --> State : understand
User o-- ContactDetail : update
Employee --> Status : track
User --> Comment : add
VRSAdmin <|-- Admin
Developer --> DevelopmentTime : minimize
Employee o-- Case : view
VRSSubjectMatterExpert <|-- SubjectMatterExpert
Developer --> Cost : minimize
Admin --> Assignee : edit

@enduml