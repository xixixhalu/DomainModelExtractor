@startuml
hide circle
class User<actor> {
	identity
	contactDetail
	account
	report
	problem
}
class Admin<actor> {
}
class Organization<actor> {
	client
}
class VRSAdmin<actor> {
}
class VRS<actor> {
}
class Developer<actor> {
}
class Employee<actor> {
	anonymity
	case
	profileDetail
}
class VRSSubjectMatterExpert<actor> {
}
class SubjectMatterExpert {
	verify()
	notify()
}
class ManagementSystem {
}
class Workplace {
}
class ViolenceCase {
}
class Update {
}
class Management {
}
class Section {
}
class Employee {
	assure()
	file()
	accuse()
	track()
	view()
	edit()
	post()
	check()
	expect()
	have()
}
class Case {
}
class Developer {
	minimize()
	encrypt()
	reuse()
}
class Cost {
}
class Security {
	maintain()
}
class Data {
}
class User {
	add()
	expedite()
	update()
	submit()
}
class Information {
}
class ContactDetail {
}
class Organization {
	view()
	redirect()
	make()
	understand()
	check()
}
class Report {
	contain()
}
class Status {
	file()
}
class Process {
}
class VRS {
	filter_out()
	generate()
	resolve()
	file()
	email()
	assign()
	prioritize()
	form()
	delete()
}
class Violence {
	mitigate()
}
class Time {
	save()
}
class Problem {
	resolve()
	know()
}
class DevelopmentTime {
}
class Communication {
}
class Credibility {
	investigate()
}
class Admin {
	generate()
	filter()
	download()
	view()
	edit()
	address()
}
class Assignee {
}
class Complaint {
	report()
	assign()
	file()
}
class Anonymity {
	maintain()
}
class Comment {
}
class ProfileDetail {
}
class Ticket {
}
class Password {
	store()
	send()
}
class MediaFile {
}
class News {
}
class Account {
	be()
}
class Term {
}
class State {
}
class VRSSubjectMatterExpert {
}
class Environment {
}
class VRSAdmin {
}
SubjectMatterExpert --> Organization : notify
VRS o-- Admin
VRS --> Report : resolve
VRS --> Complaint : delete
Ticket o-- Management
Admin --> Case : download
VRS --> Report : assign
Environment <|-- Employee
Employee o-- Case : view
Employee --> Complaint : file
User o-- Report : submit
VRS --> Organization : email
Employee --> Organization : to
Organization --> Term : understand
VRS o-- SubjectMatterExpert
Developer --> Cost : minimize
Ticket o-- Status
User --> Comment : add
Organization --> State : understand
VRSAdmin <|-- Admin
Employee --> Report : file
Developer --> Data : encrypt
Organization --> Employee : redirect
VRS --> ViolenceCase : prioritize
Developer --> Management : reuse
Employee --> Section : have
User --> Process : expedite
SubjectMatterExpert --> Credibility : verify
Developer --> DevelopmentTime : minimize
VRS --> Case : filter_out
Employee o-- ProfileDetail : edit
Admin --> Report : generate
User --> Information : add
Employee --> Communication : have
Employee o-- Anonymity : expect
Workplace o-- ViolenceCase
Admin --> Ticket : filter
Workplace o-- Update
User o-- ContactDetail : update
Admin --> Report : filter
Admin --> Case : view
Organization --> Update : check
Comment o-- Section
Developer --> ManagementSystem : reuse
Report --> MediaFile : contain
Admin --> Assignee : edit
VRSSubjectMatterExpert <|-- SubjectMatterExpert
Admin --> Status : edit
Organization --> Report : view
Employee --> Complaint : post
Information --> Complaint : to
VRS --> News : email
Admin --> Complaint : address
Case o-- ManagementSystem
Employee --> Status : check
Employee --> Status : track
VRS --> Report : generate
Comment --> Report : to

@enduml