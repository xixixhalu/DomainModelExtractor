@startuml
hide circle
class Mentee<actor> {
	profile
	password
	information
	detail
	criterion
}
class Mentor<actor> {
	availability
	interaction
	mentee
	password
	information
	detail
	trainingphaseactivity
	criterion
}
class User<actor> {
}
class Developer<actor> {
}
class End<actor> {
}
class Administrator<actor> {
}
class Client {
	serverWhile
}
class Admin {
	update()
	get()
	assign()
	export()
	track()
	send()
	match()
	view()
	delete()
}
class Mentor {
	update()
	monitor()
	create()
	show()
	register()
	mark()
	miss()
	submit()
	provide()
	report()
	track()
	send()
	select()
	accept()
	reset()
}
class Administrator {
	get()
}
class ActivityReport {
}
class Interaction {
}
class ActivityRecord {
}
class Mentee {
	update()
	see()
	upload()
	opt()
	opt_out()
	send()
	select()
	reset()
}
class User {
	update()
	load()
	access()
}
class Detail {
}
class Reminder {
}
class Status {
}
class Request {
	establish()
}
class Information {
	include()
}
class Availability {
}
class Report {
}
class Site {
}
class Phone {
}
class Password {
}
class Basis {
}
class Program {
}
class Communication {
}
class Trainingphaseactivity {
}
class Statistics {
}
class Developer {
	integrate()
}
class WebApplication {
}
class End {
	navigate()
}
class List {
}
Mentor --> Request : accept
Mentor --> ActivityRecord : create
Mentor o-- Trainingphaseactivity : monitor
Mentee o-- Information : update
Mentee o-- Detail : upload
Admin --> Report : export
Administrator --> Statistics : get
Mentor o-- Detail : register
Admin --> Mentor : assign
User --> Site : access
Admin --> Reminder : send
Developer --> WebApplication : integrate
Information --> Phone : include
Admin --> Mentor : export
Admin --> Statistics : view
Mentee o-- Password : reset
Admin --> Mentor : match
Mentor --> Report : submit
Mentor o-- Mentee : select
Mentor o-- Password : reset
Admin --> Mentor : track
Admin --> Report : get
Admin --> Status : update
Mentor --> Admin : provide
Admin --> Mentee : track
Mentee --> List : see
Mentor --> Report : send
Mentor --> Basis : provide
Admin --> Mentor : supported_by
Mentee --> Request : send
Admin --> Mentee : match
User --> Password : update
Mentee --> Program : opt
Admin --> ActivityReport : view
Admin --> User : delete
Mentee --> Mentor : select
Mentor --> ActivityReport : provide
Mentor o-- Information : update
Mentee --> Communication : opt
Mentor o-- Availability : mark
Mentor o-- Interaction : report

@enduml